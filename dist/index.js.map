{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar dimensionSize = require( '@stdlib/ndarray-base-numel-dimension' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns the size (i.e., number of elements) of a specified dimension for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {integer} dim - dimension index\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {NonNegativeInteger} dimension size\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n*\n* var out = numelDimension( zeros( [ 4, 2, 3 ] ), 0 );\n* // returns 4\n*/\nfunction numelDimension( x, dim ) {\n\tvar d;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\td = dimensionSize( x, dim );\n\tif ( isNonNegativeInteger( d ) ) {\n\t\treturn d;\n\t}\n\t// As ndarrays must have nonnegative-integer-valued dimension sizes, if the returned \"dimension size\" is not a nonnegative integer, assume we haven't been provided an ndarray:\n\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = numelDimension;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the size (i.e., number of elements) of a specified dimension for a provided ndarray.\n*\n* @module @stdlib/ndarray-numel-dimension\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n* var numelDimension = require( '@stdlib/ndarray-numel-dimension' );\n*\n* var d = numelDimension( zeros( [ 4, 2, 3 ] ), 0 );\n* // returns 4\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAuB,QAAS,uCAAwC,EAAE,YAC1EC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAgB,QAAS,sCAAuC,EAChEC,EAAS,QAAS,uBAAwB,EAqB9C,SAASC,EAAgBC,EAAGC,EAAM,CACjC,IAAIC,EAGJ,GAAK,OAAOF,GAAM,UAAYA,IAAM,KACnC,MAAM,IAAI,UAAWF,EAAQ,oEAAqEE,CAAE,CAAE,EAEvG,GAAK,CAACJ,EAAWK,CAAI,EACpB,MAAM,IAAI,UAAWH,EAAQ,qEAAsEG,CAAI,CAAE,EAG1G,GADAC,EAAIL,EAAeG,EAAGC,CAAI,EACrBN,EAAsBO,CAAE,EAC5B,OAAOA,EAGR,MAAM,IAAI,UAAWJ,EAAQ,oEAAqEE,CAAE,CAAE,CACvG,CAKAN,EAAO,QAAUK,IChCjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isInteger", "dimensionSize", "format", "numelDimension", "x", "dim", "d", "main"]
}
