{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport dimensionSize from '@stdlib/ndarray-base-numel-dimension';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the size (i.e., number of elements) of a specified dimension for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {integer} dim - dimension index\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {NonNegativeInteger} dimension size\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = numelDimension( zeros( [ 4, 2, 3 ] ), 0 );\n* // returns 4\n*/\nfunction numelDimension( x, dim ) {\n\tvar d;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\td = dimensionSize( x, dim );\n\tif ( isNonNegativeInteger( d ) ) {\n\t\treturn d;\n\t}\n\t// As ndarrays must have nonnegative-integer-valued dimension sizes, if the returned \"dimension size\" is not a nonnegative integer, assume we haven't been provided an ndarray:\n\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n}\n\n\n// EXPORTS //\n\nexport default numelDimension;\n"],"names":["numelDimension","x","dim","d","TypeError","format","isInteger","dimensionSize","isNonNegativeInteger"],"mappings":";;qYA8CA,SAASA,EAAgBC,EAAGC,GAC3B,IAAIC,EAGJ,GAAkB,iBAANF,GAAwB,OAANA,EAC7B,MAAM,IAAIG,UAAWC,EAAQ,oEAAqEJ,IAEnG,IAAMK,EAAWJ,GAChB,MAAM,IAAIE,UAAWC,EAAQ,qEAAsEH,IAGpG,GADAC,EAAII,EAAeN,EAAGC,GACjBM,EAAsBL,GAC1B,OAAOA,EAGR,MAAM,IAAIC,UAAWC,EAAQ,oEAAqEJ,GACnG"}